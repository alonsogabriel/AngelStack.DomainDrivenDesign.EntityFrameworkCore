// <auto-generated />
using System;
using ConsoleTests;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsoleTests.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818020259_AddAddress")]
    partial class AddAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.RegionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RegionType");
                });

            modelBuilder.Entity("ConsoleTests.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceOfBirthId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("PlaceOfBirthId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.Address", b =>
                {
                    b.HasOne("AngelStack.DomainDrivenDesign.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.AddressDetails", "Details", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("nvarchar(120)")
                                .HasColumnName("Details");

                            b1.HasKey("AddressId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.AddressNumber", "Number", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Number");

                            b1.HasKey("AddressId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.Neighborhood", "Neighborhood", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("nvarchar(80)")
                                .HasColumnName("Neighborhood");

                            b1.HasKey("AddressId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.Street", "Street", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("nvarchar(120)")
                                .HasColumnName("Street");

                            b1.HasKey("AddressId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.ZipCode", "ZipCode", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("AddressId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.Navigation("City");

                    b.Navigation("Details");

                    b.Navigation("Neighborhood");

                    b.Navigation("Number")
                        .IsRequired();

                    b.Navigation("Street")
                        .IsRequired();

                    b.Navigation("ZipCode")
                        .IsRequired();
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.City", b =>
                {
                    b.HasOne("AngelStack.DomainDrivenDesign.Entities.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.CityName", "Name", b1 =>
                        {
                            b1.Property<int>("CityId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2147483647)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("CityId");

                            b1.ToTable("City");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.Country", b =>
                {
                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.CountryIsoA2", "IsoA2", b1 =>
                        {
                            b1.Property<int>("CountryId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("IsoA2");

                            b1.HasKey("CountryId");

                            b1.ToTable("Country");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.CountryIsoA3", "IsoA3", b1 =>
                        {
                            b1.Property<int>("CountryId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("IsoA3");

                            b1.HasKey("CountryId");

                            b1.ToTable("Country");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.CountryIsoNumber", "IsoNumber", b1 =>
                        {
                            b1.Property<int>("CountryId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("IsoNumber");

                            b1.HasKey("CountryId");

                            b1.ToTable("Country");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.CountryName", "Name", b1 =>
                        {
                            b1.Property<int>("CountryId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("CountryId");

                            b1.ToTable("Country");

                            b1.WithOwner()
                                .HasForeignKey("CountryId");
                        });

                    b.Navigation("IsoA2");

                    b.Navigation("IsoA3");

                    b.Navigation("IsoNumber");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.Region", b =>
                {
                    b.HasOne("AngelStack.DomainDrivenDesign.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AngelStack.DomainDrivenDesign.Entities.Region", "Parent")
                        .WithMany("Regions")
                        .HasForeignKey("ParentId");

                    b.HasOne("AngelStack.DomainDrivenDesign.Entities.RegionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.RegionAlias", "Alias", b1 =>
                        {
                            b1.Property<int>("RegionId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Alias");

                            b1.HasKey("RegionId");

                            b1.ToTable("Region");

                            b1.WithOwner()
                                .HasForeignKey("RegionId");
                        });

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.RegionName", "Name", b1 =>
                        {
                            b1.Property<int>("RegionId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("nvarchar(80)")
                                .HasColumnName("Name");

                            b1.HasKey("RegionId");

                            b1.ToTable("Region");

                            b1.WithOwner()
                                .HasForeignKey("RegionId");
                        });

                    b.Navigation("Alias");

                    b.Navigation("Country");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.RegionType", b =>
                {
                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.RegionTypeName", "Name", b1 =>
                        {
                            b1.Property<int>("RegionTypeId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("nvarchar(80)")
                                .HasColumnName("Name");

                            b1.HasKey("RegionTypeId");

                            b1.ToTable("RegionType");

                            b1.WithOwner()
                                .HasForeignKey("RegionTypeId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleTests.Entities.Person", b =>
                {
                    b.HasOne("AngelStack.DomainDrivenDesign.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("ConsoleTests.Entities.Person", "AddressId");

                    b.HasOne("AngelStack.DomainDrivenDesign.Entities.City", "PlaceOfBirth")
                        .WithMany()
                        .HasForeignKey("PlaceOfBirthId");

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.DateOfBirth", "DateOfBirth", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("DateOfBirth");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("AngelStack.DomainDrivenDesign.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("nvarchar(120)")
                                .HasColumnName("Name");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address");

                    b.Navigation("DateOfBirth");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PlaceOfBirth");
                });

            modelBuilder.Entity("AngelStack.DomainDrivenDesign.Entities.Region", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Regions");
                });
#pragma warning restore 612, 618
        }
    }
}
